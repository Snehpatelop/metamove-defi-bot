{"version":3,"sources":["../src/core/BaseHttpRequest.ts","../src/core/request.ts","../src/core/ApiError.ts","../src/core/CancelablePromise.ts","../src/core/AxiosHttpRequest.ts","../src/services/CaptchaService.ts","../src/services/FundService.ts","../src/services/GeneralService.ts","../src/AptosFaucetClient.ts","../src/core/OpenAPI.ts","../src/models/AptosTapErrorCode.ts","../src/models/RejectionReasonCode.ts","../src/schemas/$AptosTapError.ts","../src/schemas/$AptosTapErrorCode.ts","../src/schemas/$FundRequest.ts","../src/schemas/$FundResponse.ts","../src/schemas/$RejectionReason.ts","../src/schemas/$RejectionReasonCode.ts"],"sourcesContent":["/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport abstract class BaseHttpRequest {\n\n    constructor(public readonly config: OpenAPIConfig) {}\n\n    public abstract request<T>(options: ApiRequestOptions): CancelablePromise<T>;\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport FormData from 'form-data';\n\nimport { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\ninterface Cookie {\n  name: string;\n  value: string;\n  expires?: Date;\n  path?: string;\n  sameSite?: \"Lax\" | \"None\" | \"Strict\";\n  secure?: boolean;\n}\n\nclass CookieJar {\n  constructor(private jar = new Map<string, Cookie[]>()) {}\n\n  setCookie(url: URL, cookieStr: string) {\n    const key = url.origin.toLowerCase();\n    if (!this.jar.has(key)) {\n      this.jar.set(key, []);\n    }\n\n    const cookie = CookieJar.parse(cookieStr);\n    this.jar.set(key, [...(this.jar.get(key)?.filter((c) => c.name !== cookie.name) || []), cookie]);\n  }\n\n  getCookies(url: URL): Cookie[] {\n    const key = url.origin.toLowerCase();\n    if (!this.jar.get(key)) {\n      return [];\n    }\n\n    // Filter out expired cookies\n    return this.jar.get(key)?.filter((cookie) => !cookie.expires || cookie.expires > new Date()) || [];\n  }\n\n  static parse(str: string): Cookie {\n    if (typeof str !== \"string\") {\n      throw new Error(\"argument str must be a string\");\n    }\n\n    const parts = str.split(\";\").map((part) => part.trim());\n\n    let cookie: Cookie;\n\n    if (parts.length > 0) {\n      const [name, value] = parts[0].split(\"=\");\n      if (!name || !value) {\n        throw new Error(\"Invalid cookie\");\n      }\n\n      cookie = {\n        name,\n        value,\n      };\n    } else {\n      throw new Error(\"Invalid cookie\");\n    }\n\n    parts.slice(1).forEach((part) => {\n      const [name, value] = part.split(\"=\");\n      if (!name.trim()) {\n        throw new Error(\"Invalid cookie\");\n      }\n\n      const nameLow = name.toLowerCase();\n      // eslint-disable-next-line quotes\n      const val = value?.charAt(0) === \"'\" || value?.charAt(0) === '\"' ? value?.slice(1, -1) : value;\n      if (nameLow === \"expires\") {\n        cookie.expires = new Date(val);\n      }\n      if (nameLow === \"path\") {\n        cookie.path = val;\n      }\n      if (nameLow === \"samesite\") {\n        if (val !== \"Lax\" && val !== \"None\" && val !== \"Strict\") {\n          throw new Error(\"Invalid cookie SameSite value\");\n        }\n        cookie.sameSite = val;\n      }\n      if (nameLow === \"secure\") {\n        cookie.secure = true;\n      }\n    });\n\n    return cookie;\n  }\n}\n\nconst jar = new CookieJar();\n\naxios.interceptors.response.use((response) => {\n  if (Array.isArray(response.headers[\"set-cookie\"])) {\n    response.headers[\"set-cookie\"].forEach((c) => {\n      jar.setCookie(new URL(response.config.url!), c);\n    });\n  }\n  return response;\n});\n\naxios.interceptors.request.use(function (config) {\n  const cookies = jar.getCookies(new URL(config.url!));\n\n  if (cookies?.length > 0 && config.headers) {\n    config.headers.cookie = cookies.map((cookie) => `${cookie.name}=${cookie.value}`).join(\"; \");\n  }\n  return config;\n});\n\nconst isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {\n    return value !== undefined && value !== null;\n};\n\nconst isString = (value: any): value is string => {\n    return typeof value === 'string';\n};\n\nconst isStringWithValue = (value: any): value is string => {\n    return isString(value) && value !== '';\n};\n\nconst isBlob = (value: any): value is Blob => {\n    return (\n        typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag])\n    );\n};\n\nconst isFormData = (value: any): value is FormData => {\n    return value instanceof FormData;\n};\n\nconst isSuccess = (status: number): boolean => {\n    return status >= 200 && status < 300;\n};\n\nconst base64 = (str: string): string => { return btoa(str); };\n\nconst getQueryString = (params: Record<string, any>): string => {\n    const qs: string[] = [];\n\n    const append = (key: string, value: any) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n\n    const process = (key: string, value: any) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            } else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            } else {\n                append(key, value);\n            }\n        }\n    };\n\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n\n    return '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring: string, group: string) => {\n            if (options.path?.hasOwnProperty(group)) {\n                return encoder(String(options.path[group]));\n            }\n            return substring;\n        });\n\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\n\nconst getFormData = (options: ApiRequestOptions): FormData | undefined => {\n    if (options.formData) {\n        const formData = new FormData();\n\n        const process = (key: string, value: any) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            } else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n                if (Array.isArray(value)) {\n                    value.forEach(v => process(key, v));\n                } else {\n                    process(key, value);\n                }\n            });\n\n        return formData;\n    }\n    return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nconst resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n    if (typeof resolver === 'function') {\n        return (resolver as Resolver<T>)(options);\n    }\n    return resolver;\n};\n\nconst getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions, formData?: FormData): Promise<Record<string, string>> => {\n    const token = await resolve(options, config.TOKEN);\n    const username = await resolve(options, config.USERNAME);\n    const password = await resolve(options, config.PASSWORD);\n    const additionalHeaders = await resolve(options, config.HEADERS);\n    const formHeaders = typeof formData?.getHeaders === 'function' && formData?.getHeaders() || {}\n\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n        ...formHeaders,\n    })\n    .filter(([_, value]) => isDefined(value))\n    .reduce((headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n    }), {} as Record<string, string>);\n\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    if (options.body) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        } else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        } else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        } else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n\n    return headers;\n};\n\nconst getRequestBody = (options: ApiRequestOptions): any => {\n    if (options.body) {\n        return options.body;\n    }\n    return undefined;\n};\n\nconst sendRequest = async <T>(\n    config: OpenAPIConfig,\n    options: ApiRequestOptions,\n    url: string,\n    body: any,\n    formData: FormData | undefined,\n    headers: Record<string, string>,\n    onCancel: OnCancel\n): Promise<AxiosResponse<T>> => {\n    const source = axios.CancelToken.source();\n\n    const requestConfig: AxiosRequestConfig = {\n        url,\n        headers,\n        data: body ?? formData,\n        method: options.method,\n        withCredentials: config.WITH_CREDENTIALS,\n        cancelToken: source.token,\n    };\n\n    const isBCS = Object.keys(config.HEADERS || {})\n    .filter((k) => k.toLowerCase() === \"accept\")\n    .map((k) => (config.HEADERS as Record<string, string>)[k])\n    .includes(\"application/x-bcs\");\n  if (isBCS) {\n    requestConfig.responseType = \"arraybuffer\";\n  }\n\n    onCancel(() => source.cancel('The user aborted a request.'));\n\n    try {\n        return await axios.request(requestConfig);\n    } catch (error) {\n        const axiosError = error as AxiosError<T>;\n        if (axiosError.response) {\n            return axiosError.response;\n        }\n        throw error;\n    }\n};\n\nconst getResponseHeader = (response: AxiosResponse<any>, responseHeader?: string): string | undefined => {\n    if (responseHeader) {\n        const content = response.headers[responseHeader];\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\n\nconst getResponseBody = (response: AxiosResponse<any>): any => {\n    if (response.status !== 204) {\n        return response.data;\n    }\n    return undefined;\n};\n\nconst catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n    const errors: Record<number, string> = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        429: 'Too Many Requests',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    }\n\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n\n    if (!result.ok) {\n        throw new ApiError(options, result, 'Generic Error');\n    }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options, formData);\n\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel);\n                const responseBody = getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n\n                const result: ApiResult = {\n                    url,\n                    ok: isSuccess(response.status),\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n\n                catchErrorCodes(options, result);\n\n                // Attach the response headers to the output. This is a hack to fix\n                // https://github.com/ferdikoomen/openapi-typescript-codegen/issues/1295\n                const out = result.body;\n                try {\n                    out[\"__headers\"] = response.headers;\n                } catch (_) {}\n\n                resolve(out);\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n    public readonly url: string;\n    public readonly status: number;\n    public readonly statusText: string;\n    public readonly body: any;\n    public readonly request: ApiRequestOptions;\n\n    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n        super(message);\n\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n\n    constructor(message: string) {\n        super(message);\n        this.name = 'CancelError';\n    }\n\n    public get isCancelled(): boolean {\n        return true;\n    }\n}\n\nexport interface OnCancel {\n    readonly isResolved: boolean;\n    readonly isRejected: boolean;\n    readonly isCancelled: boolean;\n\n    (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n    readonly [Symbol.toStringTag]!: string;\n\n    private _isResolved: boolean;\n    private _isRejected: boolean;\n    private _isCancelled: boolean;\n    private readonly _cancelHandlers: (() => void)[];\n    private readonly _promise: Promise<T>;\n    private _resolve?: (value: T | PromiseLike<T>) => void;\n    private _reject?: (reason?: any) => void;\n\n    constructor(\n        executor: (\n            resolve: (value: T | PromiseLike<T>) => void,\n            reject: (reason?: any) => void,\n            onCancel: OnCancel\n        ) => void\n    ) {\n        this._isResolved = false;\n        this._isRejected = false;\n        this._isCancelled = false;\n        this._cancelHandlers = [];\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n\n            const onResolve = (value: T | PromiseLike<T>): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isResolved = true;\n                this._resolve?.(value);\n            };\n\n            const onReject = (reason?: any): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._isRejected = true;\n                this._reject?.(reason);\n            };\n\n            const onCancel = (cancelHandler: () => void): void => {\n                if (this._isResolved || this._isRejected || this._isCancelled) {\n                    return;\n                }\n                this._cancelHandlers.push(cancelHandler);\n            };\n\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: (): boolean => this._isResolved,\n            });\n\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: (): boolean => this._isRejected,\n            });\n\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: (): boolean => this._isCancelled,\n            });\n\n            return executor(onResolve, onReject, onCancel as OnCancel);\n        });\n    }\n\n    public then<TResult1 = T, TResult2 = never>(\n        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n    ): Promise<TResult1 | TResult2> {\n        return this._promise.then(onFulfilled, onRejected);\n    }\n\n    public catch<TResult = never>(\n        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null\n    ): Promise<T | TResult> {\n        return this._promise.catch(onRejected);\n    }\n\n    public finally(onFinally?: (() => void) | null): Promise<T> {\n        return this._promise.finally(onFinally);\n    }\n\n    public cancel(): void {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n            return;\n        }\n        this._isCancelled = true;\n        if (this._cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this._cancelHandlers) {\n                    cancelHandler();\n                }\n            } catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this._cancelHandlers.length = 0;\n        this._reject?.(new CancelError('Request aborted'));\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport { BaseHttpRequest } from './BaseHttpRequest';\nimport type { CancelablePromise } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\nimport { request as __request } from './request';\n\nexport class AxiosHttpRequest extends BaseHttpRequest {\n\n    constructor(config: OpenAPIConfig) {\n        super(config);\n    }\n\n    /**\n     * Request method\n     * @param options The request options from the service\n     * @returns CancelablePromise<T>\n     * @throws ApiError\n     */\n    public request<T>(options: ApiRequestOptions): CancelablePromise<T> {\n        return __request(this.config, options);\n    }\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AptosTapError } from '../models/AptosTapError';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class CaptchaService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Initiate captcha flow\n     * With this endpoint you can initiate a captcha flow. The response will\n     * contain an image (the captcha to solve) in the body and a code in the\n     * header that you must include in the call to `/fund`. This endpoint is\n     * only relevant if the CaptchaChecker is enabled.\n     * @returns binary\n     * @returns AptosTapError\n     * @throws ApiError\n     */\n    public requestCaptcha(): CancelablePromise<Blob | AptosTapError> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/request_captcha',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AptosTapError } from '../models/AptosTapError';\nimport type { FundRequest } from '../models/FundRequest';\nimport type { FundResponse } from '../models/FundResponse';\n\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class FundService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Funds an account\n     * With this endpoint a user can create and fund an account. Depending on\n     * the configured funding backend, this may do different things under the\n     * hood (e.g. minting vs transferring) and have different funding semantics\n     * (e.g. whether it will fund an account if it already exists).\n     * @returns FundResponse\n     * @returns AptosTapError\n     * @throws ApiError\n     */\n    public fund({\n        requestBody,\n    }: {\n        requestBody: FundRequest,\n    }): CancelablePromise<FundResponse | AptosTapError> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/fund',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n    /**\n     * Check whether a given requester is eligible to be funded\n     * This function runs only the various eligibility checks that we perform\n     * in `fund` without actually funding the account or writing anything to\n     * storage. If the request is valid it returns an empty 200. If it is invalid\n     * it returns a 400 or 403 with an explanation in the response body.\n     * @returns any\n     * @returns AptosTapError\n     * @throws ApiError\n     */\n    public isEligible({\n        requestBody,\n    }: {\n        requestBody: FundRequest,\n    }): CancelablePromise<any | AptosTapError> {\n        return this.httpRequest.request({\n            method: 'POST',\n            url: '/is_eligible',\n            body: requestBody,\n            mediaType: 'application/json',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport type { BaseHttpRequest } from '../core/BaseHttpRequest';\n\nexport class GeneralService {\n\n    constructor(public readonly httpRequest: BaseHttpRequest) {}\n\n    /**\n     * Show OpenAPI explorer\n     * Provides a UI that you can use to explore the API. You can also\n     * retrieve the API directly at `/spec.yaml` and `/spec.json`.\n     * @returns string\n     * @throws ApiError\n     */\n    public spec(): CancelablePromise<string> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/spec',\n        });\n    }\n\n    /**\n     * Check API health\n     * Basic endpoint that always returns Ok for health.\n     * @returns string\n     * @throws ApiError\n     */\n    public root(): CancelablePromise<string> {\n        return this.httpRequest.request({\n            method: 'GET',\n            url: '/',\n        });\n    }\n\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { BaseHttpRequest } from './core/BaseHttpRequest';\nimport type { OpenAPIConfig } from './core/OpenAPI';\nimport { AxiosHttpRequest } from './core/AxiosHttpRequest';\n\nimport { CaptchaService } from './services/CaptchaService';\nimport { FundService } from './services/FundService';\nimport { GeneralService } from './services/GeneralService';\n\ntype HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\n\nexport class AptosFaucetClient {\n\n    public readonly captcha: CaptchaService;\n    public readonly fund: FundService;\n    public readonly general: GeneralService;\n\n    public readonly request: BaseHttpRequest;\n\n    constructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = AxiosHttpRequest) {\n        this.request = new HttpRequest({\n            BASE: config?.BASE ?? '/v1',\n            VERSION: config?.VERSION ?? '0.1.0',\n            WITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\n            CREDENTIALS: config?.CREDENTIALS ?? 'include',\n            TOKEN: config?.TOKEN,\n            USERNAME: config?.USERNAME,\n            PASSWORD: config?.PASSWORD,\n            HEADERS: config?.HEADERS,\n            ENCODE_PATH: config?.ENCODE_PATH,\n        });\n\n        this.captcha = new CaptchaService(this.request);\n        this.fund = new FundService(this.request);\n        this.general = new GeneralService(this.request);\n    }\n}\n\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\ntype Headers = Record<string, string>;\n\nexport type OpenAPIConfig = {\n    BASE: string;\n    VERSION: string;\n    WITH_CREDENTIALS: boolean;\n    CREDENTIALS: 'include' | 'omit' | 'same-origin';\n    TOKEN?: string | Resolver<string>;\n    USERNAME?: string | Resolver<string>;\n    PASSWORD?: string | Resolver<string>;\n    HEADERS?: Headers | Resolver<Headers>;\n    ENCODE_PATH?: (path: string) => string;\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n    BASE: '/v1',\n    VERSION: '0.1.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * These codes provide more granular error information beyond just the HTTP\n * status code of the response.\n */\nexport enum AptosTapErrorCode {\n    YEAH_NAH_YEAH_YEAH_YEAH_NAH_YEAH_NAH = 'YeahNahYeahYeahYeahNahYeahNah',\n    INVALID_REQUEST = 'InvalidRequest',\n    ACCOUNT_DOES_NOT_EXIST = 'AccountDoesNotExist',\n    REJECTED = 'Rejected',\n    SOURCE_IP_MISSING = 'SourceIpMissing',\n    TRANSACTION_FAILED = 'TransactionFailed',\n    ENDPOINT_NOT_ENABLED = 'EndpointNotEnabled',\n    APTOS_API_ERROR = 'AptosApiError',\n    BYPASSER_ERROR = 'BypasserError',\n    CHECKER_ERROR = 'CheckerError',\n    STORAGE_ERROR = 'StorageError',\n    FUNDER_ACCOUNT_PROBLEM = 'FunderAccountProblem',\n    TRANSACTION_TIMED_OUT = 'TransactionTimedOut',\n    SERIALIZATION_ERROR = 'SerializationError',\n    SERVER_OVERLOADED = 'ServerOverloaded',\n    WEB_FRAMEWORK_ERROR = 'WebFrameworkError',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\nexport enum RejectionReasonCode {\n    HEHE = 'Hehe',\n    ACCOUNT_ALREADY_EXISTS = 'AccountAlreadyExists',\n    IP_USAGE_LIMIT_EXHAUSTED = 'IpUsageLimitExhausted',\n    IP_IN_BLOCKLIST = 'IpInBlocklist',\n    REQUEST_FROM_VPN = 'RequestFromVpn',\n    REQUEST_FROM_CLOUD = 'RequestFromCloud',\n    MAGIC_HEADER_INCORRECT = 'MagicHeaderIncorrect',\n    CAPTCHA_INVALID = 'CaptchaInvalid',\n    AUTH_TOKEN_INVALID = 'AuthTokenInvalid',\n}\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AptosTapError = {\n    description: `This is the generic struct we use for all API errors, it contains a string\n    message and a service specific error code.`,\n    properties: {\n        message: {\n            type: 'string',\n            description: `A message describing the error`,\n            isRequired: true,\n        },\n        error_code: {\n            type: 'all-of',\n            contains: [{\n                type: 'AptosTapErrorCode',\n            }],\n            isRequired: true,\n        },\n        rejection_reasons: {\n            type: 'array',\n            contains: {\n                type: 'RejectionReason',\n            },\n            isRequired: true,\n        },\n        txn_hashes: {\n            type: 'array',\n            contains: {\n                type: 'string',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $AptosTapErrorCode = {\n    type: 'Enum',\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $FundRequest = {\n    properties: {\n        amount: {\n            type: 'number',\n            description: `If not set, the default is the preconfigured max funding amount. If set,\n            we will use this amount instead assuming it is < than the maximum,\n            otherwise we'll just use the maximum.`,\n            format: 'uint64',\n        },\n        auth_key: {\n            type: 'string',\n            description: `Either this or \\`address\\` / \\`pub_key\\` must be provided.`,\n        },\n        address: {\n            type: 'string',\n            description: `Either this or \\`auth_key\\` / \\`pub_key\\` must be provided.`,\n        },\n        pub_key: {\n            type: 'string',\n            description: `Either this or \\`auth_key\\` / \\`address\\` must be provided.`,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $FundResponse = {\n    properties: {\n        txn_hashes: {\n            type: 'array',\n            contains: {\n                type: 'string',\n            },\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $RejectionReason = {\n    properties: {\n        reason: {\n            type: 'string',\n            isRequired: true,\n        },\n        code: {\n            type: 'RejectionReasonCode',\n            isRequired: true,\n        },\n    },\n} as const;\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport const $RejectionReasonCode = {\n    type: 'Enum',\n} as const;\n"],"mappings":"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","names":["request","resolve","jar","headers","resolve","AptosTapErrorCode","RejectionReasonCode"]}